version: '2'

services:

    applications:
        image: tianon/true
        volumes:
            - ${APPLICATION}:/var/www

    ### Nginx setup
    nginx:
        container_name: ${PROJECT_NAME}_nginx
        build:
            context: ./nginx
            args:
              - PHP_UPSTREAM=php-fpm
        volumes_from:
          - applications
        volumes:
          - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
          - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        ports:
          - "${NGINX_HOST_HTTP_PORT}:80"
          - "${NGINX_HOST_HTTPS_PORT}:443"
        depends_on:
          - php-fpm
          - laravel-echo-server
          - nodejs
        networks:
          - backend
              
    ### PHP FPM
    php-fpm:
        container_name: ${PROJECT_NAME}_php-fpm
        build:
            context: ./php-fpm
            args:
              - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
              - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
              - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
              - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
              - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
              - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
              - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
            dockerfile: "Dockerfile-${PHP_VERSION}"
        volumes_from:
          - applications
        volumes:
          - ./php-fpm/php.ini:/usr/local/etc/php/php.ini
        expose:
          - "9000"
        depends_on:
          - workspace
        networks:
          - backend
          
    ### MySQL Container
    mysql:
      container_name: ${PROJECT_NAME}_mysql
      build:
        context: ./mysql
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      volumes:
        - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
        - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend
        
    ### Postgres
    postgres:
      container_name: ${PROJECT_NAME}_postgres
      build: ./postgres
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

    ### Postgres
    redis:
      container_name: ${PROJECT_NAME}_redis
      build: ./redis
      volumes:
        - ${DATA_SAVE_PATH}/redis:/data
      ports:
        - "6379:6379"
      networks:
        - backend

    caddy:
      container_name: ${PROJECT_NAME}_caddy
      build: ./caddy
      volumes_from:
        - applications
      volumes:
        - ${CADDY_CUSTOM_CADDYFILE}:/etc/Caddyfile
        - ${CADDY_HOST_LOG_PATH}:/var/log/caddy
        - ${DATA_SAVE_PATH}:/root/.caddy
      ports:
        - "${CADDY_HOST_HTTP_PORT}:80"
        - "${CADDY_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

    ### Adminer Container
    adminer:
      container_name: ${PROJECT_NAME}_adminer
      build:
        context: ./adminer
      ports:
        - "${ADM_PORT}:8080"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

    ### Selenium Container
    selenium:
      container_name: ${PROJECT_NAME}_selenium
      build: ./selenium
      ports:
        - "${SELENIUM_PORT}:4444"
      volumes:
        - /dev/shm:/dev/shm
      networks:
        - frontend

    ### Workspace Utilities Container
    workspace:
      container_name: ${PROJECT_NAME}_workspace
      build:
        context: ./workspace
        args:
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - TZ=${WORKSPACE_TIMEZONE}
        dockerfile: "Dockerfile-${PHP_VERSION}"
      volumes_from:
        - applications
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      networks:
        - frontend
        - backend

    slate:
      container_name: ${PROJECT_NAME}_slate
      build: ./slate
      ports:
        - 4567:4567
      volumes:
        - ./slate/doc-source:/slate/source
        - ./slate/build:/slate/build
      networks:
        - frontend
        - backend

    laravel-echo-server:
        container_name: "${PROJECT_NAME}_laravel-echo-server"
        build: ./laravel-echo-server
        expose:
          - '6001'
        volumes_from:
          - applications
        volumes:
          - ./laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
        networks:
          - backend

    ### PHP Worker Container

    php-worker:
      build:
        context: ./php-worker
        dockerfile: "Dockerfile-${PHP_VERSION}"
        args:
        - INSTALL_PGSQL=${PHP_WORKER_INSTALL_PGSQL}
      volumes_from:
      - applications
      volumes:
      - ./php-worker/supervisord.d:/etc/supervisord.d
      depends_on:
      - workspace
      extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
      networks:
      - backend

    ### pgAdmin
    pgadmin:
      build: ./pgadmin
      ports:
        - "5050:5050"
      volumes:
        - ${DATA_SAVE_PATH}/pgadmin-backup:/var/lib/pgadmin/storage/pgadmin4
      depends_on:
        - postgres
      environment:
        - DEFAULT_USER=${PGADMIN_USER}
        - DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      networks:
        - frontend
        - backend

    ### NODEJS
    nodejs:
      build:
        context: ./nodejs
        args:
        - NODE_VERSION=${WORKSPACE_NODE_VERSION}
      volumes_from:
        - applications
      extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
      expose:
       - "8081"
      environment:
       - TZ=${NODE_TZ}
      depends_on:
        - workspace
      networks:
        - frontend
        - backend


### Networks setup
networks:  
    frontend:
        driver: "bridge"
    backend:
      driver: "bridge"

### Volumes Setup #############################################
volumes:
  mysql:
    driver: "local"
  postgres:
    driver: "local"
